{"ast":null,"code":"var _jsxFileName = \"/home/jaaystones1/MindWave/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport ReactSlider from \"react-slider\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BinauralBeats() {\n  _s();\n  const [freqRange, setFreqRange] = useState([10, 30]);\n  const [toneRange, setToneRange] = useState([20, 1500]);\n  const [durationMinutes, setDurationMinutes] = useState(\"\");\n  const [intervalSeconds, setIntervalSeconds] = useState(\"\");\n  const [useSlider, setUseSlider] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [isSweeping, setIsSweeping] = useState(false);\n  const intervalIdRef = useRef(null); // Store the interval ID for stopping the sweep\n\n  const playContinuousBinauralBeats = (startFreq, endFreq, durationMinutes, intervalSeconds) => {\n    const durationSeconds = durationMinutes * 60;\n    const beatFrequency = 10;\n    const freqStep = (endFreq - startFreq) / (durationSeconds / intervalSeconds);\n    let currentFreq = startFreq;\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    const leftGain = audioContext.createGain();\n    const rightGain = audioContext.createGain();\n    leftGain.connect(audioContext.destination);\n    rightGain.connect(audioContext.destination);\n    const leftOscillator = audioContext.createOscillator();\n    const rightOscillator = audioContext.createOscillator();\n    leftOscillator.frequency.setValueAtTime(currentFreq + beatFrequency / 2, audioContext.currentTime);\n    rightOscillator.frequency.setValueAtTime(currentFreq - beatFrequency / 2, audioContext.currentTime);\n    leftOscillator.connect(leftGain);\n    rightOscillator.connect(rightGain);\n    leftOscillator.start();\n    rightOscillator.start();\n    intervalIdRef.current = setInterval(() => {\n      currentFreq += freqStep;\n      if (currentFreq >= endFreq) {\n        leftOscillator.stop();\n        rightOscillator.stop();\n        clearInterval(intervalIdRef.current);\n        setIsSweeping(false);\n        setMessage(\"Frequency sweep completed.\");\n        return;\n      }\n      leftOscillator.frequency.setValueAtTime(currentFreq + beatFrequency / 2, audioContext.currentTime);\n      rightOscillator.frequency.setValueAtTime(currentFreq - beatFrequency / 2, audioContext.currentTime);\n    }, intervalSeconds * 1000);\n  };\n  const startSweep = () => {\n    if (isSweeping) return;\n    const [startFreq, endFreq] = freqRange;\n    if (!durationMinutes || !intervalSeconds) {\n      setMessage(\"Please fill in all fields.\");\n      return;\n    }\n    if (startFreq >= endFreq) {\n      setMessage(\"Start frequency must be less than end frequency.\");\n      return;\n    }\n    setMessage(\"Starting frequency sweep...\");\n    setIsSweeping(true);\n    playContinuousBinauralBeats(startFreq, endFreq, durationMinutes, intervalSeconds);\n  };\n  const stopSweep = () => {\n    if (intervalIdRef.current) {\n      clearInterval(intervalIdRef.current);\n      intervalIdRef.current = null;\n      setIsSweeping(false);\n      setMessage(\"Frequency sweep stopped.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Binaural Beats Frequency Sweep\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"app-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"control-btn\",\n        onClick: startSweep,\n        disabled: isSweeping,\n        children: \"Start Sweep\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"control-btn\",\n        onClick: stopSweep,\n        disabled: !isSweeping,\n        children: \"Stop Sweep\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n_s(BinauralBeats, \"akWqW92vjsgnzRh9X2VnQIBgNS4=\");\n_c = BinauralBeats;\nexport default BinauralBeats;\nvar _c;\n$RefreshReg$(_c, \"BinauralBeats\");","map":{"version":3,"names":["React","useState","useRef","ReactSlider","jsxDEV","_jsxDEV","BinauralBeats","_s","freqRange","setFreqRange","toneRange","setToneRange","durationMinutes","setDurationMinutes","intervalSeconds","setIntervalSeconds","useSlider","setUseSlider","message","setMessage","isSweeping","setIsSweeping","intervalIdRef","playContinuousBinauralBeats","startFreq","endFreq","durationSeconds","beatFrequency","freqStep","currentFreq","audioContext","window","AudioContext","webkitAudioContext","leftGain","createGain","rightGain","connect","destination","leftOscillator","createOscillator","rightOscillator","frequency","setValueAtTime","currentTime","start","current","setInterval","stop","clearInterval","startSweep","stopSweep","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/home/jaaystones1/MindWave/src/App.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport ReactSlider from \"react-slider\";\nimport \"./App.css\";\n\nfunction BinauralBeats() {\n  const [freqRange, setFreqRange] = useState([10, 30]);\n  const [toneRange, setToneRange] = useState([20, 1500]);\n  const [durationMinutes, setDurationMinutes] = useState(\"\");\n  const [intervalSeconds, setIntervalSeconds] = useState(\"\");\n  const [useSlider, setUseSlider] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [isSweeping, setIsSweeping] = useState(false);\n\n  const intervalIdRef = useRef(null); // Store the interval ID for stopping the sweep\n\n  const playContinuousBinauralBeats = (\n    startFreq,\n    endFreq,\n    durationMinutes,\n    intervalSeconds\n  ) => {\n    const durationSeconds = durationMinutes * 60;\n    const beatFrequency = 10;\n    const freqStep = (endFreq - startFreq) / (durationSeconds / intervalSeconds);\n\n    let currentFreq = startFreq;\n\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    const leftGain = audioContext.createGain();\n    const rightGain = audioContext.createGain();\n    leftGain.connect(audioContext.destination);\n    rightGain.connect(audioContext.destination);\n\n    const leftOscillator = audioContext.createOscillator();\n    const rightOscillator = audioContext.createOscillator();\n\n    leftOscillator.frequency.setValueAtTime(\n      currentFreq + beatFrequency / 2,\n      audioContext.currentTime\n    );\n    rightOscillator.frequency.setValueAtTime(\n      currentFreq - beatFrequency / 2,\n      audioContext.currentTime\n    );\n\n    leftOscillator.connect(leftGain);\n    rightOscillator.connect(rightGain);\n\n    leftOscillator.start();\n    rightOscillator.start();\n\n    intervalIdRef.current = setInterval(() => {\n      currentFreq += freqStep;\n\n      if (currentFreq >= endFreq) {\n        leftOscillator.stop();\n        rightOscillator.stop();\n        clearInterval(intervalIdRef.current);\n        setIsSweeping(false);\n        setMessage(\"Frequency sweep completed.\");\n        return;\n      }\n\n      leftOscillator.frequency.setValueAtTime(\n        currentFreq + beatFrequency / 2,\n        audioContext.currentTime\n      );\n      rightOscillator.frequency.setValueAtTime(\n        currentFreq - beatFrequency / 2,\n        audioContext.currentTime\n      );\n    }, intervalSeconds * 1000);\n  };\n\n  const startSweep = () => {\n    if (isSweeping) return;\n\n    const [startFreq, endFreq] = freqRange;\n    if (!durationMinutes || !intervalSeconds) {\n      setMessage(\"Please fill in all fields.\");\n      return;\n    }\n\n    if (startFreq >= endFreq) {\n      setMessage(\"Start frequency must be less than end frequency.\");\n      return;\n    }\n\n    setMessage(\"Starting frequency sweep...\");\n    setIsSweeping(true);\n    playContinuousBinauralBeats(\n      startFreq,\n      endFreq,\n      durationMinutes,\n      intervalSeconds\n    );\n  };\n\n  const stopSweep = () => {\n    if (intervalIdRef.current) {\n      clearInterval(intervalIdRef.current);\n      intervalIdRef.current = null;\n      setIsSweeping(false);\n      setMessage(\"Frequency sweep stopped.\");\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <header className=\"app-header\">\n        <h1>Binaural Beats Frequency Sweep</h1>\n      </header>\n      <main className=\"app-main\">\n        {/* Existing UI elements */}\n        <button\n          className=\"control-btn\"\n          onClick={startSweep}\n          disabled={isSweeping}\n        >\n          Start Sweep\n        </button>\n        <button\n          className=\"control-btn\"\n          onClick={stopSweep}\n          disabled={!isSweeping}\n        >\n          Stop Sweep\n        </button>\n        <p>{message}</p>\n      </main>\n    </div>\n  );\n}\n\nexport default BinauralBeats;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,OAAOC,WAAW,MAAM,cAAc;AACtC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;EACpD,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;EACtD,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACa,eAAe,EAAEC,kBAAkB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACmB,UAAU,EAAEC,aAAa,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMqB,aAAa,GAAGpB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEpC,MAAMqB,2BAA2B,GAAGA,CAClCC,SAAS,EACTC,OAAO,EACPb,eAAe,EACfE,eAAe,KACZ;IACH,MAAMY,eAAe,GAAGd,eAAe,GAAG,EAAE;IAC5C,MAAMe,aAAa,GAAG,EAAE;IACxB,MAAMC,QAAQ,GAAG,CAACH,OAAO,GAAGD,SAAS,KAAKE,eAAe,GAAGZ,eAAe,CAAC;IAE5E,IAAIe,WAAW,GAAGL,SAAS;IAE3B,MAAMM,YAAY,GAAG,KAAKC,MAAM,CAACC,YAAY,IAAID,MAAM,CAACE,kBAAkB,EAAE,CAAC;IAC7E,MAAMC,QAAQ,GAAGJ,YAAY,CAACK,UAAU,CAAC,CAAC;IAC1C,MAAMC,SAAS,GAAGN,YAAY,CAACK,UAAU,CAAC,CAAC;IAC3CD,QAAQ,CAACG,OAAO,CAACP,YAAY,CAACQ,WAAW,CAAC;IAC1CF,SAAS,CAACC,OAAO,CAACP,YAAY,CAACQ,WAAW,CAAC;IAE3C,MAAMC,cAAc,GAAGT,YAAY,CAACU,gBAAgB,CAAC,CAAC;IACtD,MAAMC,eAAe,GAAGX,YAAY,CAACU,gBAAgB,CAAC,CAAC;IAEvDD,cAAc,CAACG,SAAS,CAACC,cAAc,CACrCd,WAAW,GAAGF,aAAa,GAAG,CAAC,EAC/BG,YAAY,CAACc,WACf,CAAC;IACDH,eAAe,CAACC,SAAS,CAACC,cAAc,CACtCd,WAAW,GAAGF,aAAa,GAAG,CAAC,EAC/BG,YAAY,CAACc,WACf,CAAC;IAEDL,cAAc,CAACF,OAAO,CAACH,QAAQ,CAAC;IAChCO,eAAe,CAACJ,OAAO,CAACD,SAAS,CAAC;IAElCG,cAAc,CAACM,KAAK,CAAC,CAAC;IACtBJ,eAAe,CAACI,KAAK,CAAC,CAAC;IAEvBvB,aAAa,CAACwB,OAAO,GAAGC,WAAW,CAAC,MAAM;MACxClB,WAAW,IAAID,QAAQ;MAEvB,IAAIC,WAAW,IAAIJ,OAAO,EAAE;QAC1Bc,cAAc,CAACS,IAAI,CAAC,CAAC;QACrBP,eAAe,CAACO,IAAI,CAAC,CAAC;QACtBC,aAAa,CAAC3B,aAAa,CAACwB,OAAO,CAAC;QACpCzB,aAAa,CAAC,KAAK,CAAC;QACpBF,UAAU,CAAC,4BAA4B,CAAC;QACxC;MACF;MAEAoB,cAAc,CAACG,SAAS,CAACC,cAAc,CACrCd,WAAW,GAAGF,aAAa,GAAG,CAAC,EAC/BG,YAAY,CAACc,WACf,CAAC;MACDH,eAAe,CAACC,SAAS,CAACC,cAAc,CACtCd,WAAW,GAAGF,aAAa,GAAG,CAAC,EAC/BG,YAAY,CAACc,WACf,CAAC;IACH,CAAC,EAAE9B,eAAe,GAAG,IAAI,CAAC;EAC5B,CAAC;EAED,MAAMoC,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAI9B,UAAU,EAAE;IAEhB,MAAM,CAACI,SAAS,EAAEC,OAAO,CAAC,GAAGjB,SAAS;IACtC,IAAI,CAACI,eAAe,IAAI,CAACE,eAAe,EAAE;MACxCK,UAAU,CAAC,4BAA4B,CAAC;MACxC;IACF;IAEA,IAAIK,SAAS,IAAIC,OAAO,EAAE;MACxBN,UAAU,CAAC,kDAAkD,CAAC;MAC9D;IACF;IAEAA,UAAU,CAAC,6BAA6B,CAAC;IACzCE,aAAa,CAAC,IAAI,CAAC;IACnBE,2BAA2B,CACzBC,SAAS,EACTC,OAAO,EACPb,eAAe,EACfE,eACF,CAAC;EACH,CAAC;EAED,MAAMqC,SAAS,GAAGA,CAAA,KAAM;IACtB,IAAI7B,aAAa,CAACwB,OAAO,EAAE;MACzBG,aAAa,CAAC3B,aAAa,CAACwB,OAAO,CAAC;MACpCxB,aAAa,CAACwB,OAAO,GAAG,IAAI;MAC5BzB,aAAa,CAAC,KAAK,CAAC;MACpBF,UAAU,CAAC,0BAA0B,CAAC;IACxC;EACF,CAAC;EAED,oBACEd,OAAA;IAAK+C,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5BhD,OAAA;MAAQ+C,SAAS,EAAC,YAAY;MAAAC,QAAA,eAC5BhD,OAAA;QAAAgD,QAAA,EAAI;MAA8B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC,eACTpD,OAAA;MAAM+C,SAAS,EAAC,UAAU;MAAAC,QAAA,gBAExBhD,OAAA;QACE+C,SAAS,EAAC,aAAa;QACvBM,OAAO,EAAER,UAAW;QACpBS,QAAQ,EAAEvC,UAAW;QAAAiC,QAAA,EACtB;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTpD,OAAA;QACE+C,SAAS,EAAC,aAAa;QACvBM,OAAO,EAAEP,SAAU;QACnBQ,QAAQ,EAAE,CAACvC,UAAW;QAAAiC,QAAA,EACvB;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTpD,OAAA;QAAAgD,QAAA,EAAInC;MAAO;QAAAoC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAAClD,EAAA,CAhIQD,aAAa;AAAAsD,EAAA,GAAbtD,aAAa;AAkItB,eAAeA,aAAa;AAAC,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}